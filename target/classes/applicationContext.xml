<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                          http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/context
                          http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/aop
	                      http://www.springframework.org/schema/aop/spring-aop.xsd
	                      http://www.springframework.org/schema/tx
	                      http://www.springframework.org/schema/tx/spring-tx.xsd">

        <context:property-placeholder location="server.properties,jdbc.properties"/>
        <!-- 自动扫描 -->


        <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
            <property name="converters">
                <set>
                    <bean class="com.resource.support.StringToBooleanConverter"/>
                </set>
            </property>

        </bean>
        <context:component-scan base-package="com.game,com.socket,com.resource"/>
        <!-- 数据源配置-->

        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
            <property name="driverClassName" value="${jdbc.driverClassName}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>

        </bean>
        <!--<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
            <property name="dataSource" ref="dataSource"/>
            <property name="packagesToScan" value="com.game.**.entity"/>
            <property name="hibernateProperties">
                <props>
                    <prop key="current_session_context_class">executor</prop>
                    <prop key="cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
                    <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                    <prop key="hibernate.cache.use_second_level_cache">false</prop>
                    <prop key="hibernate.hbm2ddl.auto">save</prop>
                    <prop key="hibernate.show_sql">false</prop>
                </props>
            </property>
        </bean>-->
    <!--配置SqlSessionFactory-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--加载mybatis配置文件-->
        <property name="configLocation" value="mybatis.cfg.xml"/>
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--事务控制器
        对mybatis操作数据库事务控制，spring使用jdbc的事务控制类
    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--配置数据源
        dataSource在applicationContext-dao.xml中配置了
        -->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--传播行为-->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>


    <bean id="serverConfigValue" class="com.game.ServerConfigValue">
        <property name="port" value="${server.socket.port}"/>
    </bean>
    <!--<bean id="actionDispatcher" class="com.socket.dispatcher.core.ActionDispatcher">
    </bean>-->

    <!--Mapper批量扫描，从Mapper包扫描接口，自动创建代理对象，并在Spring容器中自动注册
    使用 Mybatis与Spring整合包的这个 Mapper 扫描器后， Mybatis 配置文件里的扫描器，就可以取消掉了
    遵循的规范 不变
    自动扫描出来的Mapper的bean的id为Mapper类名（首字母小写）
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--如果需要扫描多个报下的mapper,每个包中间使用半角逗号分开-->
        <property name="basePackage" value="com.**.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sessionFactory" />
    </bean>
    <!-- 静态资源配置-->


    <import resource="applicationConfig.xml"/>

</beans>